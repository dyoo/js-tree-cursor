A Zipper data structure for JavaScript DOM trees and other tree-like
structures.

Danny Yoo (dyoo@hashcollision.org)


This library provides a functional interface to traverse and
manipulate trees, using G\'erard Huet's Zipper data structure.  See:
http://en.wikipedia.org/wiki/Zipper_(data_structure)


Usage:

You can create a cursor into the DOM with this:

    var cursor = TreeCursor.domToCursor(document.body)


The node at the cursor can be found with:

    cursor.node: node
    The node that's currently being focused.


The cursor implements the following functions:

    cursor.down: -> cursor
    Move the cursor down to the first child.

    cursor.up: -> cursor
    Move the cursor up to the parent.

    cursor.left: -> cursor
    Move the cursor to the previous sibling.

    cursor.right: -> cursor
    Move the cursor to the next sibling.

    cursor.succ: -> cursor
    Move the cursor to the successor.

    cursor.pred: -> cursor
    Move the cursor to the predecessor.


along with predicates to make sure the motion is legal:

    cursor.canDown: -> boolean

    cursor.canUp: -> boolean

    cursor.canLeft: -> boolean

    cursor.canRight: -> boolean

    cursor.canSucc: -> boolean

    cursor.canPred: -> boolean


and operations to make changes to the structure of the tree:

    cursor.replaceNode: node -> cursor
    Change the node at the cursor.



FIXME: add the other updating operations.  Otherwise, this is a silly module!




----------------------------------------------------------------------


Raw interface:

TreeCursor.adaptTreeCursor: [node Node] 
                            [openF (Node -> (arrayof Node))]
                            [closeF (Node (arrayof Node) -> Node)] -> cursor

Creates a cursor that can traverse the structure of the given node.

openF and closeF are functions that teach the cursor how to sink and
rise through the structure of a node.

As an example, the TreeCursor implementation has a function
TreeCursor.arrayToCursor to walk deeply nested JavaScript structures,
with arrays.  It does not dive into objects, though.


----------------------------------------------------------------------

Test cases are in tests.js, and are invoked by visiting index.html.